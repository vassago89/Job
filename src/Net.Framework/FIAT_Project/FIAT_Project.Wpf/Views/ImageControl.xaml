<UserControl x:Class="FIAT_Project.Wpf.Views.ImageControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:prism="http://prismlibrary.com/"             
             prism:ViewModelLocator.AutoWireViewModel="True"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:converters="clr-namespace:Net.Framework.Helper.Wpf.Converters;assembly=Net.Framework.Helper.Wpf">
    <UserControl.Resources>
        <Style TargetType="Border">
            <Setter Property="CornerRadius" Value="2"/>
            <Setter Property="BorderThickness" Value="3"/>
            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignBody}"/>
        </Style>
        <Style TargetType="GroupBox">
            <Setter Property="Margin" Value="4"/>
        </Style>
        <converters:BoolToVisibleConverter x:Key="BoolToVisibleConverter"/>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid ClipToBounds="True" Margin="0 0 0 12">
            <Border Background="Black" BorderThickness="0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnLoaded"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseWheel">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseWheel"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeftButtonDown"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeftButtonUp"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseRightButtonDown"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseRightButtonUp">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseRightButtonUp"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseLeave"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseMove">
                        <ei:CallMethodAction TargetObject="{Binding}" MethodName="OnMouseMove"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Canvas>
                    <Canvas.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="{Binding ZoomService.Scale}" ScaleY="{Binding ZoomService.Scale}"/>
                            <TranslateTransform X="{Binding ZoomService.TranslateX}" Y="{Binding ZoomService.TranslateY}"/>
                        </TransformGroup>
                    </Canvas.RenderTransform>
                    <Image Source="{Binding Source}"/>
                    <Canvas Visibility="{Binding OnLazer, Converter={StaticResource BoolToVisibleConverter}}">
                        <Canvas Visibility="{Binding IsSetROI, Converter={StaticResource BoolToVisibleConverter}}">
                            <Rectangle StrokeThickness="{Binding ZoomService.OverlayThickness}"
                                    Stroke="Yellow"
                                    StrokeDashArray="2 2"
                                    Canvas.Left="{Binding SetRectROI.X}"
                                    Canvas.Top="{Binding SetRectROI.Y}"
                                    Width="{Binding SetRectROI.Width}"
                                    Height="{Binding SetRectROI.Height}"
                                    Visibility="{Binding IsRectangle, Converter={StaticResource BoolToVisibleConverter}}"/>
                            <Ellipse StrokeThickness="{Binding ZoomService.OverlayThickness}"
                                    Stroke="Yellow"
                                    StrokeDashArray="2 2"
                                    Canvas.Left="{Binding SetRectROI.X}"
                                    Canvas.Top="{Binding SetRectROI.Y}"
                                    Width="{Binding SetRectROI.Width}"
                                    Height="{Binding SetRectROI.Height}"
                                    Visibility="{Binding IsEllipse, Converter={StaticResource BoolToVisibleConverter}}"/>
                            <Polygon StrokeThickness="{Binding ZoomService.OverlayThickness}"
                                    Stroke="Yellow"
                                    StrokeDashArray="2 2"
                                    Points="{Binding SetPolygonROI}"
                                    Visibility="{Binding IsPolygon, Converter={StaticResource BoolToVisibleConverter}}"/>
                        </Canvas>
                        <Canvas Visibility="{Binding OnROI, Converter={StaticResource BoolToVisibleConverter}}">
                            <Rectangle StrokeThickness="{Binding ZoomService.OverlayThickness}"
                                    Stroke="Yellow"
                                    Canvas.Left="{Binding RectangleROI.X}"
                                    Canvas.Top="{Binding RectangleROI.Y}"
                                    Width="{Binding RectangleROI.Width}"
                                    Height="{Binding RectangleROI.Height}"
                                    Visibility="{Binding IsRectangle, Converter={StaticResource BoolToVisibleConverter}}"/>
                            <Ellipse StrokeThickness="{Binding ZoomService.OverlayThickness}"
                                    Stroke="Yellow"
                                    Canvas.Left="{Binding EllipseROI.X}"
                                    Canvas.Top="{Binding EllipseROI.Y}"
                                    Width="{Binding EllipseROI.Width}"
                                    Height="{Binding EllipseROI.Height}"
                                    Visibility="{Binding IsEllipse, Converter={StaticResource BoolToVisibleConverter}}"/>
                            <Polygon StrokeThickness="{Binding ZoomService.OverlayThickness}"
                                    Stroke="Yellow"
                                    Points="{Binding PolygonROI}"
                                    Visibility="{Binding IsPolygon, Converter={StaticResource BoolToVisibleConverter}}"/>
                        </Canvas>
                    </Canvas>
                </Canvas>
            </Border>
        </Grid>
        <Border Grid.Row="1"  Margin="-5">
            <Border.Resources>
                <Style TargetType="Button"  BasedOn="{StaticResource MaterialDesignFlatButton}">
                    <!--<Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
                        <Setter Property="FontSize" Value="18"/>-->
                    <Setter Property="Margin" Value="4"/>
                </Style>
                <Style TargetType="CheckBox" BasedOn="{StaticResource MaterialDesignCheckBox}">
                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="12 0 0 0"/>
                </Style>
                <Style TargetType="RadioButton" BasedOn="{StaticResource MaterialDesignRadioButton}">
                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                    <Setter Property="Margin" Value="12 0 0 0"/>
                </Style>
                <Style TargetType="TextBlock">
                    <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
                    <Setter Property="FontSize" Value="18"/>
                </Style>
            </Border.Resources>
            <DockPanel>
                <!--<Grid DockPanel.Dock="Left">
                    <Grid.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="Margin" Value="12"/>
                        </Style>
                    </Grid.Resources>
                    <TextBlock Text="Menu"/>
                </Grid>-->
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Right">
                    <Button Command="{Binding ZoomInCommand}"
                        ToolTip="Zoom In">
                        <StackPanel>
                            <TextBlock Text="&#xE71F;"/>
                        </StackPanel>
                    </Button>
                    <Button Command="{Binding ZoomOutCommand}"
                        ToolTip="Zoom Out">
                        <StackPanel>
                            <TextBlock Text="&#xE71F;"/>
                        </StackPanel>
                    </Button>
                    <Button Command="{Binding ZoomFitCommand}"
                        ToolTip="Zoom Fit">
                        <StackPanel>
                            <TextBlock Text="&#xE71E;"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <CheckBox IsChecked="{Binding OnROI}" Visibility="{Binding OnLazer, Converter={StaticResource BoolToVisibleConverter}}" ToolTip="Region of Interest">
                        <StackPanel>
                            <TextBlock Text="&#xE7B3;"/>
                        </StackPanel>
                    </CheckBox>
                    <RadioButton IsChecked="{Binding IsRectangle}" Visibility="{Binding OnLazer, Converter={StaticResource BoolToVisibleConverter}}" IsEnabled="{Binding OnROI}" ToolTip="Rectangle">
                        <StackPanel>
                            <TextBlock Text="&#xF407;"/>
                        </StackPanel>
                    </RadioButton>
                    <RadioButton IsChecked="{Binding IsEllipse}" Visibility="{Binding OnLazer, Converter={StaticResource BoolToVisibleConverter}}" IsEnabled="{Binding OnROI}" ToolTip="Ellipse">
                        <StackPanel>
                            <TextBlock Text="&#xEA3A;"/>
                        </StackPanel>
                    </RadioButton>
                    <RadioButton IsChecked="{Binding IsPolygon}" Visibility="{Binding OnLazer, Converter={StaticResource BoolToVisibleConverter}}" IsEnabled="{Binding OnROI}" ToolTip="Polygon (Shift)">
                        <StackPanel>
                            <TextBlock Text="&#xF408;"/>
                        </StackPanel>
                    </RadioButton>
                </StackPanel>
            </DockPanel>
        </Border>
    </Grid>
</UserControl>
